<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\xadow_pebble_11u35.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\xadow_pebble_11u35.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Thu Aug 27 14:04:27 2015
<BR><P>
<H3>Maximum Stack Usage =        416 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__sti___8_main_cpp &rArr; USBSerial::USBSerial(unsigned short, unsigned short, unsigned short, bool) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">MemManage_Handler</a><BR>
 <LI><a href="#[a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UsageFault_Handler</a><BR>
 <LI><a href="#[c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SVC_Handler</a><BR>
 <LI><a href="#[d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DebugMon_Handler</a><BR>
 <LI><a href="#[e]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">PendSV_Handler</a><BR>
 <LI><a href="#[f]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SysTick_Handler</a><BR>
 <LI><a href="#[1a]">Reserved_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">Reserved_IRQHandler</a><BR>
 <LI><a href="#[25]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC_IRQHandler</a><BR>
 <LI><a href="#[c4]">mbed_assert_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[116]">error</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[35]">&lang;Func1&rang;</a> from SerialBase.o(i.<Func1>) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[27]">BOD_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[a]">BusFault_Handler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[d]">DebugMon_Handler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[10]">FLEX_INT0_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[11]">FLEX_INT1_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[12]">FLEX_INT2_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[13]">FLEX_INT3_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[14]">FLEX_INT4_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[15]">FLEX_INT5_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[16]">FLEX_INT6_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[17]">FLEX_INT7_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[28]">FMC_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[18]">GINT0_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[19]">GINT1_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[1c]">I2C_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[9]">MemManage_Handler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[1a]">Reserved_IRQHandler</a> from startup_LPC11xx.o(.text) referenced 7 times from startup_LPC11xx.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[21]">SSP0_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[1b]">SSP1_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_LPC11Uxx.o(i.SystemInit) referenced from startup_LPC11xx.o(.text)
 <LI><a href="#[1d]">TIMER16_0_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[1e]">TIMER16_1_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[1f]">TIMER32_0_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[20]">TIMER32_1_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[22]">UART_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[29]">USBWakeup_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[24]">USB_FIQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[23]">USB_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[b]">UsageFault_Handler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[26]">WDT_IRQHandler</a> from startup_LPC11xx.o(.text) referenced from startup_LPC11xx.o(RESET)
 <LI><a href="#[3e]">prv_pebble_control(PebbleControl)</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[37]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[3d]">prv_pebble_write_byte(unsigned char)</a> from main.o(.text) referenced from main.o(.constdata)
 <LI><a href="#[34]">__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[49]">BufferedSerial::getc()</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[4a]">BufferedSerial::putc(int)</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[4b]">BufferedSerial::puts(const char*)</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[3f]">BufferedSerial::rxIrq()</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata)
 <LI><a href="#[40]">BufferedSerial::txIrq()</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata)
 <LI><a href="#[4d]">BufferedSerial::write(const void*, unsigned)</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[4c]">BufferedSerial::printf(const char*, ...)</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[47]">BufferedSerial::readable()</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[48]">BufferedSerial::writeable()</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[46]">BufferedSerial::~BufferedSerial__deallocating()</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[2e]">BufferedSerial::~BufferedSerial()</a> from bufferedserial.o(.text) referenced from bufferedserial.o(.constdata__ZTV14BufferedSerial)
 <LI><a href="#[2e]">BufferedSerial::~BufferedSerial()</a> from bufferedserial.o(.text) referenced from main.o(.text)
 <LI><a href="#[82]">mbed::FileHandle::~FileHandle__sub_object()</a> from retarget.o(i._ZN4mbed10FileHandleD2Ev) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[36]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[3c]">mbed::FunctionPointerArg1&lang;void, void&rang;::membercaller&lang;BufferedSerial&rang;(void*, unsigned*)</a> from bufferedserial.o(t._ZN4mbed19FunctionPointerArg1IvvE12membercallerI14BufferedSerialEEvPvPj) referenced from bufferedserial.o(t._ZN4mbed10SerialBase6attachI14BufferedSerialEEvPT_MS3_FvvENS0_7IrqTypeE)
 <LI><a href="#[7c]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[7c]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[7e]">mbed::Stream::fsync()</a> from Stream.o(i._ZN4mbed6Stream5fsyncEv) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[7e]">mbed::Stream::fsync()</a> from Stream.o(i._ZN4mbed6Stream5fsyncEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[7d]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[7d]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[7b]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[7b]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[83]">mbed::Stream::~Stream__sub_object()</a> from Stream.o(i._ZN4mbed6StreamD2Ev) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[84]">mbed::FileBase::~FileBase()</a> from FileBase.o(i._ZN4mbed8FileBaseD1Ev) referenced from FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[85]">mbed::FileLike::~FileLike__sub_object()</a> from FileLike.o(i._ZN4mbed8FileLikeD2Ev) referenced from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[62]">USBCDC::deviceDesc()</a> from usbcdc.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[62]">USBCDC::deviceDesc()</a> from usbcdc.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[63]">USBCDC::configurationDesc()</a> from usbcdc.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[63]">USBCDC::configurationDesc()</a> from usbcdc.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[6a]">USBCDC::lineCodingChanged(int, int, int, int)</a> from usbcdc.o(i._ZN6USBCDC17lineCodingChangedEiiii) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[66]">USBCDC::stringIproductDesc()</a> from usbcdc.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[66]">USBCDC::stringIproductDesc()</a> from usbcdc.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[5e]">USBCDC::USBCallback_request()</a> from usbcdc.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[5e]">USBCDC::USBCallback_request()</a> from usbcdc.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[69]">USBCDC::stringIinterfaceDesc()</a> from usbcdc.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[69]">USBCDC::stringIinterfaceDesc()</a> from usbcdc.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[5f]">USBCDC::USBCallback_requestCompleted(unsigned char*, unsigned)</a> from usbcdc.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[5f]">USBCDC::USBCallback_requestCompleted(unsigned char*, unsigned)</a> from usbcdc.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[60]">USBCDC::USBCallback_setConfiguration(unsigned char)</a> from usbcdc.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[60]">USBCDC::USBCallback_setConfiguration(unsigned char)</a> from usbcdc.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[56]">USBHAL::EP1_IN_callback()</a> from usbaudio.o(i._ZN6USBHAL15EP1_IN_callbackEv) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[56]">USBHAL::EP1_IN_callback()</a> from usbaudio.o(i._ZN6USBHAL15EP1_IN_callbackEv) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[56]">USBHAL::EP1_IN_callback()</a> from usbaudio.o(i._ZN6USBHAL15EP1_IN_callbackEv) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[56]">USBHAL::EP1_IN_callback()</a> from usbaudio.o(i._ZN6USBHAL15EP1_IN_callbackEv) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[58]">USBHAL::EP2_IN_callback()</a> from usbaudio.o(i._ZN6USBHAL15EP2_IN_callbackEv) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[58]">USBHAL::EP2_IN_callback()</a> from usbaudio.o(i._ZN6USBHAL15EP2_IN_callbackEv) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[58]">USBHAL::EP2_IN_callback()</a> from usbaudio.o(i._ZN6USBHAL15EP2_IN_callbackEv) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[58]">USBHAL::EP2_IN_callback()</a> from usbaudio.o(i._ZN6USBHAL15EP2_IN_callbackEv) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[5a]">USBHAL::EP3_IN_callback()</a> from usbhal_lpc11u.o(i._ZN6USBHAL15EP3_IN_callbackEv) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[5a]">USBHAL::EP3_IN_callback()</a> from usbhal_lpc11u.o(i._ZN6USBHAL15EP3_IN_callbackEv) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[5a]">USBHAL::EP3_IN_callback()</a> from usbhal_lpc11u.o(i._ZN6USBHAL15EP3_IN_callbackEv) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[5a]">USBHAL::EP3_IN_callback()</a> from usbhal_lpc11u.o(i._ZN6USBHAL15EP3_IN_callbackEv) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[5c]">USBHAL::EP4_IN_callback()</a> from usbaudio.o(i._ZN6USBHAL15EP4_IN_callbackEv) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[5c]">USBHAL::EP4_IN_callback()</a> from usbaudio.o(i._ZN6USBHAL15EP4_IN_callbackEv) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[5c]">USBHAL::EP4_IN_callback()</a> from usbaudio.o(i._ZN6USBHAL15EP4_IN_callbackEv) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[5c]">USBHAL::EP4_IN_callback()</a> from usbaudio.o(i._ZN6USBHAL15EP4_IN_callbackEv) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[6c]">USBHAL::EP0setupCallback()</a> from usbhal_lpc11u.o(i._ZN6USBHAL16EP0setupCallbackEv) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[55]">USBHAL::EP1_OUT_callback()</a> from usbaudio.o(i._ZN6USBHAL16EP1_OUT_callbackEv) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[55]">USBHAL::EP1_OUT_callback()</a> from usbaudio.o(i._ZN6USBHAL16EP1_OUT_callbackEv) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[55]">USBHAL::EP1_OUT_callback()</a> from usbaudio.o(i._ZN6USBHAL16EP1_OUT_callbackEv) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[55]">USBHAL::EP1_OUT_callback()</a> from usbaudio.o(i._ZN6USBHAL16EP1_OUT_callbackEv) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[57]">USBHAL::EP2_OUT_callback()</a> from usbaudio.o(i._ZN6USBHAL16EP2_OUT_callbackEv) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[57]">USBHAL::EP2_OUT_callback()</a> from usbaudio.o(i._ZN6USBHAL16EP2_OUT_callbackEv) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[57]">USBHAL::EP2_OUT_callback()</a> from usbaudio.o(i._ZN6USBHAL16EP2_OUT_callbackEv) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[59]">USBHAL::EP3_OUT_callback()</a> from usbhal_lpc11u.o(i._ZN6USBHAL16EP3_OUT_callbackEv) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[59]">USBHAL::EP3_OUT_callback()</a> from usbhal_lpc11u.o(i._ZN6USBHAL16EP3_OUT_callbackEv) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[59]">USBHAL::EP3_OUT_callback()</a> from usbhal_lpc11u.o(i._ZN6USBHAL16EP3_OUT_callbackEv) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[59]">USBHAL::EP3_OUT_callback()</a> from usbhal_lpc11u.o(i._ZN6USBHAL16EP3_OUT_callbackEv) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[5b]">USBHAL::EP4_OUT_callback()</a> from usbaudio.o(i._ZN6USBHAL16EP4_OUT_callbackEv) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[5b]">USBHAL::EP4_OUT_callback()</a> from usbaudio.o(i._ZN6USBHAL16EP4_OUT_callbackEv) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[5b]">USBHAL::EP4_OUT_callback()</a> from usbaudio.o(i._ZN6USBHAL16EP4_OUT_callbackEv) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[5b]">USBHAL::EP4_OUT_callback()</a> from usbaudio.o(i._ZN6USBHAL16EP4_OUT_callbackEv) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[6f]">USBHAL::suspendStateChanged(unsigned)</a> from usbhal_lpc11u.o(i._ZN6USBHAL19suspendStateChangedEj) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[54]">USBHAL::SOF(int)</a> from usbhal_lpc11u.o(i._ZN6USBHAL3SOFEi) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[54]">USBHAL::SOF(int)</a> from usbhal_lpc11u.o(i._ZN6USBHAL3SOFEi) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[54]">USBHAL::SOF(int)</a> from usbhal_lpc11u.o(i._ZN6USBHAL3SOFEi) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[54]">USBHAL::SOF(int)</a> from usbhal_lpc11u.o(i._ZN6USBHAL3SOFEi) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[6e]">USBHAL::EP0in()</a> from usbhal_lpc11u.o(i._ZN6USBHAL5EP0inEv) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[6d]">USBHAL::EP0out()</a> from usbhal_lpc11u.o(i._ZN6USBHAL6EP0outEv) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[2f]">USBHAL::_usbisr()</a> from usbhal_lpc11u.o(.text) referenced from usbhal_lpc11u.o(.text)
 <LI><a href="#[6b]">USBHAL::busReset()</a> from usbhal_lpc11u.o(i._ZN6USBHAL8busResetEv) referenced from usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
 <LI><a href="#[73]">USBDevice::deviceDesc()</a> from usbdevice.o(.text) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[4f]">USBDevice::EP0setupCallback()</a> from usbdevice.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[4f]">USBDevice::EP0setupCallback()</a> from usbdevice.o(.text) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[4f]">USBDevice::EP0setupCallback()</a> from usbdevice.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[64]">USBDevice::stringLangidDesc()</a> from usbdevice.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[64]">USBDevice::stringLangidDesc()</a> from usbdevice.o(.text) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[64]">USBDevice::stringLangidDesc()</a> from usbdevice.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[74]">USBDevice::configurationDesc()</a> from usbdevice.o(i._ZN9USBDevice17configurationDescEv) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[67]">USBDevice::stringIserialDesc()</a> from usbdevice.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[67]">USBDevice::stringIserialDesc()</a> from usbdevice.o(.text) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[67]">USBDevice::stringIserialDesc()</a> from usbdevice.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[75]">USBDevice::stringIproductDesc()</a> from usbdevice.o(.text) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[70]">USBDevice::USBCallback_request()</a> from usbdevice.o(i._ZN9USBDevice19USBCallback_requestEv) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[52]">USBDevice::connectStateChanged(unsigned)</a> from usbdevice.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[52]">USBDevice::connectStateChanged(unsigned)</a> from usbdevice.o(.text) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[52]">USBDevice::connectStateChanged(unsigned)</a> from usbdevice.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[53]">USBDevice::suspendStateChanged(unsigned)</a> from usbdevice.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[53]">USBDevice::suspendStateChanged(unsigned)</a> from usbdevice.o(.text) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[53]">USBDevice::suspendStateChanged(unsigned)</a> from usbdevice.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[5d]">USBDevice::USBCallback_busReset()</a> from usbaudio.o(i._ZN9USBDevice20USBCallback_busResetEv) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[5d]">USBDevice::USBCallback_busReset()</a> from usbaudio.o(i._ZN9USBDevice20USBCallback_busResetEv) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[5d]">USBDevice::USBCallback_busReset()</a> from usbaudio.o(i._ZN9USBDevice20USBCallback_busResetEv) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[76]">USBDevice::stringIinterfaceDesc()</a> from usbdevice.o(.text) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[65]">USBDevice::stringImanufacturerDesc()</a> from usbdevice.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[65]">USBDevice::stringImanufacturerDesc()</a> from usbdevice.o(.text) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[65]">USBDevice::stringImanufacturerDesc()</a> from usbdevice.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[61]">USBDevice::USBCallback_setInterface(unsigned short, unsigned char)</a> from usbdevice.o(i._ZN9USBDevice24USBCallback_setInterfaceEth) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[61]">USBDevice::USBCallback_setInterface(unsigned short, unsigned char)</a> from usbdevice.o(i._ZN9USBDevice24USBCallback_setInterfaceEth) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[61]">USBDevice::USBCallback_setInterface(unsigned short, unsigned char)</a> from usbdevice.o(i._ZN9USBDevice24USBCallback_setInterfaceEth) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[68]">USBDevice::stringIConfigurationDesc()</a> from usbdevice.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[68]">USBDevice::stringIConfigurationDesc()</a> from usbdevice.o(.text) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[68]">USBDevice::stringIConfigurationDesc()</a> from usbdevice.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[71]">USBDevice::USBCallback_requestCompleted(unsigned char*, unsigned)</a> from usbdevice.o(i._ZN9USBDevice28USBCallback_requestCompletedEPhj) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[72]">USBDevice::USBCallback_setConfiguration(unsigned char)</a> from usbdevice.o(i._ZN9USBDevice28USBCallback_setConfigurationEh) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[51]">USBDevice::EP0in()</a> from usbdevice.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[51]">USBDevice::EP0in()</a> from usbdevice.o(.text) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[51]">USBDevice::EP0in()</a> from usbdevice.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[50]">USBDevice::EP0out()</a> from usbdevice.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[50]">USBDevice::EP0out()</a> from usbdevice.o(.text) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[50]">USBDevice::EP0out()</a> from usbdevice.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[4e]">USBDevice::busReset()</a> from usbdevice.o(.text) referenced from usbcdc.o(.constdata__ZTV6USBCDC)
 <LI><a href="#[4e]">USBDevice::busReset()</a> from usbdevice.o(.text) referenced from usbdevice.o(.constdata__ZTV9USBDevice)
 <LI><a href="#[4e]">USBDevice::busReset()</a> from usbdevice.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[77]">USBSerial::EP2_OUT_callback()</a> from usbserial.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[78]">USBSerial::lineCodingChanged(int, int, int, int)</a> from usbserial.o(i._ZN9USBSerial17lineCodingChangedEiiii) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[7a]">USBSerial::_getc()</a> from usbserial.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[79]">USBSerial::_putc(int)</a> from usbserial.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[2d]">USBSerial::~USBSerial()</a> from main.o(i._ZN9USBSerialD1Ev) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[2d]">USBSerial::~USBSerial()</a> from main.o(i._ZN9USBSerialD1Ev) referenced from main.o(.text)
 <LI><a href="#[80]">thunk{-108} to USBSerial::_getc()</a> from usbserial.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[7f]">thunk{-108} to USBSerial::_putc(int)</a> from usbserial.o(.text) referenced from usbserial.o(.constdata__ZTV9USBSerial)
 <LI><a href="#[81]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[81]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[81]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[2c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_LPC11xx.o(.text)
 <LI><a href="#[86]">__sti___8_main_cpp</a> from main.o(.text) referenced from main.o(.init_array)
 <LI><a href="#[31]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[32]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[30]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[38]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[38]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[39]">fputc</a> from fputc_fp.o(.text) referenced from printfa.o(i.__0vfprintf)
 <LI><a href="#[33]">isspace</a> from isspace_c.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[2a]">main</a> from retarget.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3a]">uart0_irq</a> from serial_api.o(i.uart0_irq) referenced from serial_api.o(i.serial_irq_set)
 <LI><a href="#[44]">us_ticker_clear_interrupt</a> from us_ticker.o(i.us_ticker_clear_interrupt) referenced from us_ticker_api.o(.constdata)
 <LI><a href="#[43]">us_ticker_disable_interrupt</a> from us_ticker.o(i.us_ticker_disable_interrupt) referenced from us_ticker_api.o(.constdata)
 <LI><a href="#[41]">us_ticker_init</a> from us_ticker.o(i.us_ticker_init) referenced from us_ticker_api.o(.constdata)
 <LI><a href="#[3b]">us_ticker_irq_handler</a> from us_ticker_api.o(i.us_ticker_irq_handler) referenced from us_ticker.o(i.us_ticker_init)
 <LI><a href="#[3b]">us_ticker_irq_handler</a> from us_ticker_api.o(i.us_ticker_irq_handler) referenced from us_ticker.o(i.us_ticker_read)
 <LI><a href="#[42]">us_ticker_read</a> from us_ticker.o(i.us_ticker_read) referenced from us_ticker_api.o(.constdata)
 <LI><a href="#[45]">us_ticker_set_interrupt</a> from us_ticker.o(i.us_ticker_set_interrupt) referenced from us_ticker_api.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(.text)
</UL>
<P><STRONG><a name="[18d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[88]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[145]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8a]"></a>__use_full_stdio</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry6b.o(.ARM.Collect$$$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = __use_full_stdio &rArr; _initio &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[8e]"></a>__main_after_initio</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry6b.o(.ARM.Collect$$$$00000006))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[18e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[8c]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[18f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[190]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[191]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[192]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[91]"></a>hdlc_streaming_decode_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hdlc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pebble_prepare_for_read
</UL>

<P><STRONG><a name="[94]"></a>hdlc_streaming_decode</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, hdlc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pebble_handle_byte
</UL>

<P><STRONG><a name="[93]"></a>hdlc_streaming_decode_finish</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hdlc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pebble_handle_byte
</UL>

<P><STRONG><a name="[96]"></a>hdlc_encode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hdlc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_send_byte
</UL>

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Reserved_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLEX_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLEX_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLEX_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLEX_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FLEX_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>FLEX_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLEX_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLEX_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER16_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER16_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER32_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER32_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>USBWakeup_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USB_FIQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_LPC11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>_initio</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, initio_oe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_initio
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__use_full_stdio
</UL>

<P><STRONG><a name="[b7]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_write(char*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[37]"></a>__default_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[193]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>pebble_init</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, pebbleserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pebble_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[90]"></a>pebble_prepare_for_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pebbleserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pebble_prepare_for_read
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdlc_streaming_decode_start
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pebble_handle_byte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[92]"></a>pebble_handle_byte</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, pebbleserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pebble_handle_byte &rArr; pebble_prepare_for_read
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pebble_prepare_for_read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdlc_streaming_decode_finish
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdlc_streaming_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[99]"></a>pebble_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pebbleserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pebble_write &rArr; prv_write_internal &rArr; prv_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9a]"></a>pebble_handle_link_control</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pebbleserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pebble_handle_link_control &rArr; prv_write_internal &rArr; prv_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9c]"></a>get_vbat()</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_vbat() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a2]"></a>$Super$$main</STRONG> (Thumb, 1410 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = $Super$$main &rArr; gps_get_longitude() &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::frequency(int)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::readable()
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::getc()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_position_fix()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_get_uid()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_write(char*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_erase()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_sate_used()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_longitude()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_emulate_init(unsigned char*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_check_online()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_read()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_init()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_latitude()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_altitude()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_check_online()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_speed()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vbat()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pebble_handle_link_control
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pebble_write
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pebble_handle_byte
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pebble_prepare_for_read
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pebble_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>USBMemCopy(unsigned char*, unsigned char*, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointWrite(unsigned char, unsigned char*, unsigned)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointReadResult(unsigned char, unsigned char*, unsigned*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0write(unsigned char*, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0getReadResult(unsigned char*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0setup(unsigned char*)
</UL>

<P><STRONG><a name="[c7]"></a>USBHAL::usbisr()</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBHAL::usbisr() &rArr; disableEndpoints()
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableEndpoints()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::_usbisr()
</UL>

<P><STRONG><a name="[2f]"></a>USBHAL::_usbisr()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBHAL::_usbisr() &rArr; USBHAL::usbisr() &rArr; disableEndpoints()
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::usbisr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbhal_lpc11u.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>USBHAL::USBHAL()</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBHAL::USBHAL() &rArr; wait &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ(IRQn_Type)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::USBDevice(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[195]"></a>USBHAL::USBHAL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, usbhal_lpc11u.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>USBHAL::~USBHAL()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBHAL::~USBHAL()
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::~USBSerial()
</UL>

<P><STRONG><a name="[196]"></a>USBHAL::~USBHAL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, usbhal_lpc11u.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>USBHAL::connect()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::connect(bool)
</UL>

<P><STRONG><a name="[cc]"></a>USBHAL::disconnect()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbhal_lpc11u.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::disconnect()
</UL>

<P><STRONG><a name="[ec]"></a>USBHAL::configureDevice()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetConfiguration()
</UL>

<P><STRONG><a name="[eb]"></a>USBHAL::unconfigureDevice()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetConfiguration()
</UL>

<P><STRONG><a name="[f0]"></a>USBHAL::setAddress(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetAddress()
</UL>

<P><STRONG><a name="[197]"></a>USBHAL::remoteWakeup()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbhal_lpc11u.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>USBHAL::EP0setup(unsigned char*)</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBHAL::EP0setup(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBMemCopy(unsigned char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlSetup()
</UL>

<P><STRONG><a name="[cf]"></a>USBHAL::EP0read()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBHAL::EP0read()
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlOut()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlSetup()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlIn()
</UL>

<P><STRONG><a name="[e9]"></a>USBHAL::EP0readStage()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlIn()
</UL>

<P><STRONG><a name="[d0]"></a>USBHAL::EP0getReadResult(unsigned char*)</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBHAL::EP0getReadResult(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBMemCopy(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlOut()
</UL>

<P><STRONG><a name="[d2]"></a>USBHAL::EP0write(unsigned char*, unsigned)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBHAL::EP0write(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBMemCopy(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlOut()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlSetup()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlIn()
</UL>

<P><STRONG><a name="[198]"></a>USBHAL::EP0getWriteResult()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhal_lpc11u.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>USBHAL::EP0stall()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBHAL::EP0stall()
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::EP0out()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::EP0in()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::EP0setupCallback()
</UL>

<P><STRONG><a name="[d4]"></a>USBHAL::endpointRead(unsigned char, unsigned)</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBHAL::endpointRead(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::readStart(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[d5]"></a>USBHAL::endpointReadResult(unsigned char, unsigned char*, unsigned*)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBHAL::endpointReadResult(unsigned char, unsigned char*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBMemCopy(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::readEP_NB(unsigned char, unsigned char*, unsigned*, unsigned)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::readEP(unsigned char, unsigned char*, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[d6]"></a>USBHAL::endpointWrite(unsigned char, unsigned char*, unsigned)</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBHAL::endpointWrite(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBMemCopy(unsigned char*, unsigned char*, unsigned)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::writeNB(unsigned char, unsigned char*, unsigned, unsigned)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::write(unsigned char, unsigned char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[d7]"></a>USBHAL::endpointWriteResult(unsigned char)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBHAL::endpointWriteResult(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::writeNB(unsigned char, unsigned char*, unsigned, unsigned)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::write(unsigned char, unsigned char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[d8]"></a>USBHAL::stallEndpoint(unsigned char)</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBHAL::stallEndpoint(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetFeature()
</UL>

<P><STRONG><a name="[d9]"></a>USBHAL::unstallEndpoint(unsigned char)</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBHAL::unstallEndpoint(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::realiseEndpoint(unsigned char, unsigned, unsigned)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestClearFeature()
</UL>

<P><STRONG><a name="[da]"></a>USBHAL::realiseEndpoint(unsigned char, unsigned, unsigned)</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBHAL::realiseEndpoint(unsigned char, unsigned, unsigned) &rArr; USBHAL::unstallEndpoint(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::unstallEndpoint(unsigned char)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::addRateFeedbackEndpoint(unsigned char, unsigned)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::addEndpoint(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[db]"></a>USBHAL::getEndpointStallState(unsigned char)</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBHAL::getEndpointStallState(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestGetStatus()
</UL>

<P><STRONG><a name="[dc]"></a>USBDevice::USBDevice(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBDevice::USBDevice(unsigned short, unsigned short, unsigned short) &rArr; USBHAL::USBHAL() &rArr; wait &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::USBHAL()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::USBCDC(unsigned short, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[199]"></a>USBDevice::USBDevice__sub_object(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, usbdevice.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>USBDevice::configured()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbdevice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::readEP_NB(unsigned char, unsigned char*, unsigned*, unsigned)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::writeNB(unsigned char, unsigned char*, unsigned, unsigned)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::connect(bool)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::readEP(unsigned char, unsigned char*, unsigned*, unsigned)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::write(unsigned char, unsigned char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[dd]"></a>USBDevice::connect(bool)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBDevice::connect(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::configured()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::connect()
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::USBCDC(unsigned short, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[e0]"></a>USBDevice::disconnect()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::disconnect()
</UL>

<P><STRONG><a name="[e1]"></a>USBDevice::addEndpoint(unsigned char, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBDevice::addEndpoint(unsigned char, unsigned) &rArr; USBHAL::realiseEndpoint(unsigned char, unsigned, unsigned) &rArr; USBHAL::unstallEndpoint(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::realiseEndpoint(unsigned char, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::USBCallback_setConfiguration(unsigned char)
</UL>

<P><STRONG><a name="[e2]"></a>USBDevice::readStart(unsigned char, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBDevice::readStart(unsigned char, unsigned) &rArr; USBHAL::endpointRead(unsigned char, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointRead(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::readEP_NB(unsigned char*, unsigned*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::readEP(unsigned char*, unsigned*)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::USBCallback_setConfiguration(unsigned char)
</UL>

<P><STRONG><a name="[e3]"></a>USBDevice::readEP(unsigned char, unsigned char*, unsigned*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBDevice::readEP(unsigned char, unsigned char*, unsigned*, unsigned) &rArr; USBHAL::endpointReadResult(unsigned char, unsigned char*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::configured()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointReadResult(unsigned char, unsigned char*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::readEP(unsigned char*, unsigned*)
</UL>

<P><STRONG><a name="[e4]"></a>USBDevice::readEP_NB(unsigned char, unsigned char*, unsigned*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, usbdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::configured()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointReadResult(unsigned char, unsigned char*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::readEP_NB(unsigned char*, unsigned*)
</UL>

<P><STRONG><a name="[e5]"></a>USBDevice::write(unsigned char, unsigned char*, unsigned, unsigned)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBDevice::write(unsigned char, unsigned char*, unsigned, unsigned) &rArr; USBHAL::endpointWrite(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::configured()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointWriteResult(unsigned char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointWrite(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::send(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[e6]"></a>USBDevice::writeNB(unsigned char, unsigned char*, unsigned, unsigned)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, usbdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::configured()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointWriteResult(unsigned char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointWrite(unsigned char, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[73]"></a>USBDevice::deviceDesc()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDevice::deviceDesc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
</UL>
<P><STRONG><a name="[64]"></a>USBDevice::stringLangidDesc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdevice.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[65]"></a>USBDevice::stringImanufacturerDesc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdevice.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[75]"></a>USBDevice::stringIproductDesc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdevice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
</UL>
<P><STRONG><a name="[67]"></a>USBDevice::stringIserialDesc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdevice.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[68]"></a>USBDevice::stringIConfigurationDesc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdevice.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[76]"></a>USBDevice::stringIinterfaceDesc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdevice.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
</UL>
<P><STRONG><a name="[4e]"></a>USBDevice::busReset()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDevice::busReset()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[e8]"></a>USBDevice::controlIn()</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBDevice::controlIn() &rArr; USBHAL::EP0write(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0write(unsigned char*, unsigned)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0readStage()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0read()
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::EP0in()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlSetup()
</UL>

<P><STRONG><a name="[f7]"></a>USBDevice::requestSetInterface()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBDevice::requestSetInterface()
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetup()
</UL>

<P><STRONG><a name="[f6]"></a>USBDevice::requestGetInterface()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbdevice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetup()
</UL>

<P><STRONG><a name="[ea]"></a>USBDevice::requestSetConfiguration()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDevice::requestSetConfiguration()
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::unconfigureDevice()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::configureDevice()
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetup()
</UL>

<P><STRONG><a name="[f5]"></a>USBDevice::requestGetConfiguration()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbdevice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetup()
</UL>

<P><STRONG><a name="[ed]"></a>USBDevice::requestGetDescriptor()</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBDevice::requestGetDescriptor() &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetup()
</UL>

<P><STRONG><a name="[ef]"></a>USBDevice::requestSetAddress()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDevice::requestSetAddress()
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::setAddress(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetup()
</UL>

<P><STRONG><a name="[f1]"></a>USBDevice::requestSetFeature()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBDevice::requestSetFeature() &rArr; USBHAL::stallEndpoint(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::stallEndpoint(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetup()
</UL>

<P><STRONG><a name="[f2]"></a>USBDevice::requestClearFeature()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBDevice::requestClearFeature() &rArr; USBHAL::unstallEndpoint(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::unstallEndpoint(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetup()
</UL>

<P><STRONG><a name="[f3]"></a>USBDevice::requestGetStatus()</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBDevice::requestGetStatus() &rArr; USBHAL::getEndpointStallState(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::getEndpointStallState(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetup()
</UL>

<P><STRONG><a name="[f4]"></a>USBDevice::requestSetup()</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBDevice::requestSetup() &rArr; USBDevice::requestGetStatus() &rArr; USBHAL::getEndpointStallState(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestGetStatus()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestClearFeature()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetFeature()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetAddress()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestGetDescriptor()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestGetConfiguration()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetConfiguration()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestGetInterface()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetInterface()
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlSetup()
</UL>

<P><STRONG><a name="[f9]"></a>USBDevice::decodeSetupPacket(unsigned char*, SETUP_PACKET*)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDevice::decodeSetupPacket(unsigned char*, SETUP_PACKET*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlSetup()
</UL>

<P><STRONG><a name="[f8]"></a>USBDevice::controlSetup()</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBDevice::controlSetup() &rArr; USBDevice::requestSetup() &rArr; USBDevice::requestGetStatus() &rArr; USBHAL::getEndpointStallState(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::decodeSetupPacket(unsigned char*, SETUP_PACKET*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetup()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlIn()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0write(unsigned char*, unsigned)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0read()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0setup(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::EP0setupCallback()
</UL>

<P><STRONG><a name="[4f]"></a>USBDevice::EP0setupCallback()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBDevice::EP0setupCallback() &rArr; USBDevice::controlSetup() &rArr; USBDevice::requestSetup() &rArr; USBDevice::requestGetStatus() &rArr; USBHAL::getEndpointStallState(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlSetup()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0stall()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[fa]"></a>USBDevice::controlOut()</STRONG> (Thumb, 106 bytes, Stack size 80 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBDevice::controlOut() &rArr; USBHAL::EP0write(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0write(unsigned char*, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0getReadResult(unsigned char*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0read()
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::EP0out()
</UL>

<P><STRONG><a name="[50]"></a>USBDevice::EP0out()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBDevice::EP0out() &rArr; USBDevice::controlOut() &rArr; USBHAL::EP0write(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlOut()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0stall()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[51]"></a>USBDevice::EP0in()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBDevice::EP0in() &rArr; USBDevice::controlIn() &rArr; USBHAL::EP0write(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::controlIn()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0stall()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[52]"></a>USBDevice::connectStateChanged(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdevice.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[53]"></a>USBDevice::suspendStateChanged(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdevice.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[19a]"></a>USBDevice::findDescriptor(unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usbdevice.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>USBDevice::getTransferPtr()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbdevice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::USBCallback_requestCompleted(unsigned char*, unsigned)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::USBCallback_request()
</UL>

<P><STRONG><a name="[fb]"></a>USBDevice::addRateFeedbackEndpoint(unsigned char, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::realiseEndpoint(unsigned char, unsigned, unsigned)
</UL>

<P><STRONG><a name="[79]"></a>USBSerial::_putc(int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBSerial::_putc(int) &rArr; USBCDC::send(unsigned char*, unsigned) &rArr; USBDevice::write(unsigned char, unsigned char*, unsigned, unsigned) &rArr; USBHAL::endpointWrite(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::send(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-108} to USBSerial::_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
</UL>
<P><STRONG><a name="[7f]"></a>thunk{-108} to USBSerial::_putc(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = thunk{-108} to USBSerial::_putc(int) &rArr; USBSerial::_putc(int) &rArr; USBCDC::send(unsigned char*, unsigned) &rArr; USBDevice::write(unsigned char, unsigned char*, unsigned, unsigned) &rArr; USBHAL::endpointWrite(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
</UL>
<P><STRONG><a name="[7a]"></a>USBSerial::_getc()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBSerial::_getc() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircBuffer&lang;unsigned char, (int)128&rang;::isEmpty()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-108} to USBSerial::_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
</UL>
<P><STRONG><a name="[80]"></a>thunk{-108} to USBSerial::_getc()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = thunk{-108} to USBSerial::_getc() &rArr; USBSerial::_getc() &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
</UL>
<P><STRONG><a name="[19b]"></a>USBSerial::available()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbserial.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>USBSerial::writeBlock(unsigned char*, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbserial.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::send(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[77]"></a>USBSerial::EP2_OUT_callback()</STRONG> (Thumb, 96 bytes, Stack size 88 bytes, usbserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBSerial::EP2_OUT_callback() &rArr; USBCDC::readEP(unsigned char*, unsigned*) &rArr; USBDevice::readEP(unsigned char, unsigned char*, unsigned*, unsigned) &rArr; USBHAL::endpointReadResult(unsigned char, unsigned char*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircBuffer&lang;unsigned char, (int)128&rang;::queue(unsigned char)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::readEP(unsigned char*, unsigned*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
</UL>
<P><STRONG><a name="[101]"></a>USBCDC::USBCDC(unsigned short, unsigned short, unsigned short, bool)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbcdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBCDC::USBCDC(unsigned short, unsigned short, unsigned short, bool) &rArr; USBDevice::USBDevice(unsigned short, unsigned short, unsigned short) &rArr; USBHAL::USBHAL() &rArr; wait &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::USBDevice(unsigned short, unsigned short, unsigned short)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::connect(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::USBSerial(unsigned short, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[19c]"></a>USBCDC::USBCDC__sub_object(unsigned short, unsigned short, unsigned short, bool)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, usbcdc.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>USBCDC::deviceDesc()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, usbcdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBCDC::deviceDesc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[66]"></a>USBCDC::stringIproductDesc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbcdc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[69]"></a>USBCDC::stringIinterfaceDesc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbcdc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[63]"></a>USBCDC::configurationDesc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbcdc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[fc]"></a>USBCDC::send(unsigned char*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, usbcdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBCDC::send(unsigned char*, unsigned) &rArr; USBDevice::write(unsigned char, unsigned char*, unsigned, unsigned) &rArr; USBHAL::endpointWrite(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::write(unsigned char, unsigned char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::writeBlock(unsigned char*, unsigned short)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::_putc(int)
</UL>

<P><STRONG><a name="[ff]"></a>USBCDC::readEP(unsigned char*, unsigned*)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, usbcdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBCDC::readEP(unsigned char*, unsigned*) &rArr; USBDevice::readEP(unsigned char, unsigned char*, unsigned*, unsigned) &rArr; USBHAL::endpointReadResult(unsigned char, unsigned char*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::readStart(unsigned char, unsigned)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::readEP(unsigned char, unsigned char*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::EP2_OUT_callback()
</UL>

<P><STRONG><a name="[102]"></a>USBCDC::readEP_NB(unsigned char*, unsigned*)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, usbcdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::readStart(unsigned char, unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::readEP_NB(unsigned char, unsigned char*, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[5e]"></a>USBCDC::USBCallback_request()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usbcdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBCDC::USBCallback_request()
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::getTransferPtr()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[5f]"></a>USBCDC::USBCallback_requestCompleted(unsigned char*, unsigned)</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, usbcdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBCDC::USBCallback_requestCompleted(unsigned char*, unsigned) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::getTransferPtr()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[60]"></a>USBCDC::USBCallback_setConfiguration(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbcdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBCDC::USBCallback_setConfiguration(unsigned char) &rArr; USBDevice::addEndpoint(unsigned char, unsigned) &rArr; USBHAL::realiseEndpoint(unsigned char, unsigned, unsigned) &rArr; USBHAL::unstallEndpoint(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::readStart(unsigned char, unsigned)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::addEndpoint(unsigned char, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[3f]"></a>BufferedSerial::rxIrq()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BufferedSerial::rxIrq() &rArr; Buffer&lang;char&rang;::operator =(char) &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::operator =(char)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>BufferedSerial::txIrq()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BufferedSerial::txIrq() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::available()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::get()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>BufferedSerial::prime()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BufferedSerial::prime() &rArr; mbed::SerialBase::attach&lang;BufferedSerial&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach&lang;BufferedSerial&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::write(const void*, unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::puts(const char*)
</UL>

<P><STRONG><a name="[c1]"></a>BufferedSerial::BufferedSerial(PinName, PinName, unsigned, unsigned, const char*)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BufferedSerial::BufferedSerial(PinName, PinName, unsigned, unsigned, const char*) &rArr; mbed::RawSerial::RawSerial(PinName, PinName) &rArr; mbed::SerialBase::SerialBase(PinName, PinName) &rArr; serial_init &rArr; pinmap_merge &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach&lang;BufferedSerial&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::Buffer(unsigned)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::RawSerial(PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[19d]"></a>BufferedSerial::BufferedSerial__sub_object(PinName, PinName, unsigned, unsigned, const char*)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, bufferedserial.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>BufferedSerial::~BufferedSerial()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BufferedSerial::~BufferedSerial() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::~Buffer()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::~BufferedSerial__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[19e]"></a>BufferedSerial::~BufferedSerial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bufferedserial.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>BufferedSerial::~BufferedSerial__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BufferedSerial::~BufferedSerial__deallocating() &rArr; BufferedSerial::~BufferedSerial() &rArr; mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::~BufferedSerial()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[47]"></a>BufferedSerial::readable()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BufferedSerial::readable()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::available()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[48]"></a>BufferedSerial::writeable()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bufferedserial.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[49]"></a>BufferedSerial::getc()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BufferedSerial::getc() &rArr; Buffer&lang;char&rang;::get() &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[4a]"></a>BufferedSerial::putc(int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach&lang;BufferedSerial&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::operator =(char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_pebble_write_byte(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[4b]"></a>BufferedSerial::puts(const char*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BufferedSerial::puts(const char*) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach&lang;BufferedSerial&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::operator =(char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[4d]"></a>BufferedSerial::write(const void*, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BufferedSerial::write(const void*, unsigned) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach&lang;BufferedSerial&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::operator =(char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[4c]"></a>BufferedSerial::printf(const char*, ...)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, bufferedserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BufferedSerial::printf(const char*, ...) &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::write(const void*, unsigned)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(.constdata__ZTV14BufferedSerial)
</UL>
<P><STRONG><a name="[ab]"></a>gps_check_online()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, xadowgps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = gps_check_online() &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[119]"></a>gps_get_utc_date_time()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, xadowgps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[11a]"></a>gps_get_status()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xadowgps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[ac]"></a>gps_get_latitude()</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, xadowgps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gps_get_latitude() &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[11c]"></a>gps_get_ns()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, xadowgps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[ad]"></a>gps_get_longitude()</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, xadowgps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gps_get_longitude() &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[11d]"></a>gps_get_ew()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, xadowgps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[ae]"></a>gps_get_speed()</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, xadowgps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gps_get_speed() &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[11e]"></a>gps_get_course()</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, xadowgps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[b0]"></a>gps_get_position_fix()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, xadowgps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = gps_get_position_fix() &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b1]"></a>gps_get_sate_used()</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, xadowgps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = gps_get_sate_used() &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[af]"></a>gps_get_altitude()</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, xadowgps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = gps_get_altitude() &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[11f]"></a>gps_get_mode()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xadowgps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[120]"></a>gps_get_mode2()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, xadowgps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[b2]"></a>nfc_check_online()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, xadownfc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nfc_check_online() &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b3]"></a>nfc_adapter_init()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, xadownfc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nfc_adapter_init() &rArr; mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b4]"></a>nfc_adapter_get_uid()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, xadownfc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nfc_adapter_get_uid() &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b6]"></a>nfc_adapter_read()</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, xadownfc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nfc_adapter_read() &rArr; mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ba]"></a>nfc_adapter_write(char*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, xadownfc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nfc_adapter_write(char*) &rArr; mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[bb]"></a>nfc_adapter_erase()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, xadownfc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nfc_adapter_erase() &rArr; mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[bc]"></a>nfc_emulate_init(unsigned char*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, xadownfc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nfc_emulate_init(unsigned char*) &rArr; mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[39]"></a>fputc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fputc_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fputc &rArr; _sys_write &rArr; serial_init &rArr; pinmap_merge &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vfprintf)
</UL>
<P><STRONG><a name="[122]"></a>fflush</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fflush_fe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fflush
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::operator =(char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::get()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircBuffer&lang;unsigned char, (int)128&rang;::queue(unsigned char)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::_getc()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::USBCallback_requestCompleted(unsigned char*, unsigned)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::clear()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b5]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[175]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[104]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::USBCallback_requestCompleted(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[15e]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::getEndpointStallState(unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::stallEndpoint(unsigned char)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointWriteResult(unsigned char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointWrite(unsigned char, unsigned char*, unsigned)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointReadResult(unsigned char, unsigned char*, unsigned*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointRead(unsigned char, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0getReadResult(unsigned char*)
</UL>

<P><STRONG><a name="[1a6]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableEndpoints()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::realiseEndpoint(unsigned char, unsigned, unsigned)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::unstallEndpoint(unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::stallEndpoint(unsigned char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointWrite(unsigned char, unsigned char*, unsigned)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::endpointRead(unsigned char, unsigned)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0stall()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0write(unsigned char*, unsigned)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::EP0read()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::USBHAL()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::usbisr()
</UL>

<P><STRONG><a name="[1a8]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__0sscanf</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[12d]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[87]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vbat()
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vbat()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vbat()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_longitude()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_latitude()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_altitude()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_speed()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vbat()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_course()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>

<P><STRONG><a name="[1aa]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1ab]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[13b]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[137]"></a>_scanf_really_real</STRONG> (Thumb, 586 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[12c]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[30]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>__strtod_int</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[16d]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[168]"></a>__rt_new_handler_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_unwind_cpp_pr0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__aeabi_unwind_cpp_pr1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>_Unwind_DeleteException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>_Unwind_Activity</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>_Unwind_RaiseException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_unwinder.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cpp_unwinder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[132]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[131]"></a>_float_epilogue</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[13e]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[12f]"></a>_double_epilogue</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_dadd</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8f]"></a>std::terminate()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[89]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1b1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1b2]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1b3]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>isspace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, isspace_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>__vfscanf</STRONG> (Thumb, 806 bytes, Stack size 80 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_ul2d</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[144]"></a>__cxa_get_globals</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[146]"></a>__ctype_lookup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[148]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1b4]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, retarget.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = main &rArr; $Super$$main &rArr; gps_get_longitude() &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ca]"></a>NVIC_SetVector</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cmsis_nvic.o(i.NVIC_SetVector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::USBHAL()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, system_LPC11Uxx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_LPC11xx.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>mbed::DigitalOut::DigitalOut(PinName)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::DigitalOut::DigitalOut(PinName) &rArr; gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1b8]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutC1E7PinName), UNUSED)

<P><STRONG><a name="[a3]"></a>mbed::DigitalOut::operator =(int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutaSEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::DigitalOut::operator =(int) &rArr; gpio_write(gpio_t*, int) &rArr; mbed_assert_internal &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write(gpio_t*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1b9]"></a>mbed::FileHandle::~FileHandle()</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev), UNUSED)

<P><STRONG><a name="[82]"></a>mbed::FileHandle::~FileHandle__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[36]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[a4]"></a>mbed::SerialBase::baud(int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBase4baudEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mbed::SerialBase::baud(int) &rArr; serial_baud &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[10b]"></a>mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase6attachEPFvvENS0_7IrqTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::~BufferedSerial()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
</UL>

<P><STRONG><a name="[14e]"></a>mbed::SerialBase::SerialBase(PinName, PinName)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName) &rArr; serial_init &rArr; pinmap_merge &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::RawSerial::RawSerial(PinName, PinName)
</UL>

<P><STRONG><a name="[1ba]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_), UNUSED)

<P><STRONG><a name="[15b]"></a>mbed::mbed_set_unbuffered_stream(std::__FILE*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, retarget.o(i._ZN4mbed26mbed_set_unbuffered_streamEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::mbed_set_unbuffered_stream(std::__FILE*)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[118]"></a>mbed::I2C::read(int, char*, int, bool)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, I2C.o(i._ZN4mbed3I2C4readEiPcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mbed::I2C::read(int, char*, int, bool) &rArr; i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_position_fix()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_get_uid()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_sate_used()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_longitude()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_check_online()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_read()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_latitude()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_altitude()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_check_online()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_speed()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_mode2()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_mode()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_course()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_ew()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_ns()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_status()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_utc_date_time()
</UL>

<P><STRONG><a name="[117]"></a>mbed::I2C::write(int, const char*, int, bool)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, I2C.o(i._ZN4mbed3I2C5writeEiPKcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mbed::I2C::write(int, const char*, int, bool) &rArr; i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_position_fix()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_get_uid()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_write(char*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_erase()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_sate_used()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_longitude()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_emulate_init(unsigned char*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_check_online()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_read()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_init()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_latitude()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_altitude()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_check_online()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_speed()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_mode2()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_mode()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_course()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_ew()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_ns()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_status()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_utc_date_time()
</UL>

<P><STRONG><a name="[a8]"></a>mbed::I2C::frequency(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, I2C.o(i._ZN4mbed3I2C9frequencyEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbed::I2C::frequency(int) &rArr; i2c_frequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c2]"></a>mbed::I2C::I2C(PinName, PinName)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, I2C.o(i._ZN4mbed3I2CC1E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbed::I2C::I2C(PinName, PinName) &rArr; i2c_init &rArr; pinmap_merge &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1bb]"></a>mbed::I2C::I2C__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, I2C.o(i._ZN4mbed3I2CC1E7PinNameS1_), UNUSED)

<P><STRONG><a name="[7c]"></a>mbed::Stream::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 2]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[7e]"></a>mbed::Stream::fsync()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5fsyncEv))
<BR>[Address Reference Count : 2]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[7d]"></a>mbed::Stream::lseek(long, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5lseekEli))
<BR>[Address Reference Count : 2]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[7b]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[a6]"></a>mbed::Stream::printf(const char*, ...)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, Stream.o(i._ZN4mbed6Stream6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::Stream::printf(const char*, ...) &rArr; fflush
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[157]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::USBSerial(unsigned short, unsigned short, unsigned short, bool)
</UL>

<P><STRONG><a name="[1bc]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev), UNUSED)

<P><STRONG><a name="[83]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::~USBSerial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[161]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[15d]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, FileBase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[15f]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
</UL>

<P><STRONG><a name="[1bd]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[84]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[1be]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev), UNUSED)

<P><STRONG><a name="[158]"></a>mbed::FileLike::FileLike__sub_object(const char*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileLike::FileLike__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[1bf]"></a>mbed::FileLike::~FileLike()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev), UNUSED)

<P><STRONG><a name="[85]"></a>mbed::FileLike::~FileLike__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[160]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::fileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[162]"></a>mbed::FilePath::file()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::file()
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[176]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[163]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[177]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[164]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1c0]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[10f]"></a>mbed::RawSerial::RawSerial(PinName, PinName)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, RawSerial.o(i._ZN4mbed9RawSerialC1E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mbed::RawSerial::RawSerial(PinName, PinName) &rArr; mbed::SerialBase::SerialBase(PinName, PinName) &rArr; serial_init &rArr; pinmap_merge &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::BufferedSerial(PinName, PinName, unsigned, unsigned, const char*)
</UL>

<P><STRONG><a name="[1c1]"></a>mbed::RawSerial::RawSerial__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, RawSerial.o(i._ZN4mbed9RawSerialC1E7PinNameS1_), UNUSED)

<P><STRONG><a name="[6a]"></a>USBCDC::lineCodingChanged(int, int, int, int)</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, usbcdc.o(i._ZN6USBCDC17lineCodingChangedEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBCDC::lineCodingChanged(int, int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[56]"></a>USBHAL::EP1_IN_callback()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbaudio.o(i._ZN6USBHAL15EP1_IN_callbackEv))
<BR>[Address Reference Count : 4]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
<LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[58]"></a>USBHAL::EP2_IN_callback()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbaudio.o(i._ZN6USBHAL15EP2_IN_callbackEv))
<BR>[Address Reference Count : 4]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
<LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[5a]"></a>USBHAL::EP3_IN_callback()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbhal_lpc11u.o(i._ZN6USBHAL15EP3_IN_callbackEv))
<BR>[Address Reference Count : 4]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
<LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[5c]"></a>USBHAL::EP4_IN_callback()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbaudio.o(i._ZN6USBHAL15EP4_IN_callbackEv))
<BR>[Address Reference Count : 4]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
<LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[6c]"></a>USBHAL::EP0setupCallback()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhal_lpc11u.o(i._ZN6USBHAL16EP0setupCallbackEv))
<BR>[Address Reference Count : 1]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
</UL>
<P><STRONG><a name="[55]"></a>USBHAL::EP1_OUT_callback()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbaudio.o(i._ZN6USBHAL16EP1_OUT_callbackEv))
<BR>[Address Reference Count : 4]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
<LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[57]"></a>USBHAL::EP2_OUT_callback()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbaudio.o(i._ZN6USBHAL16EP2_OUT_callbackEv))
<BR>[Address Reference Count : 3]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
<LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[59]"></a>USBHAL::EP3_OUT_callback()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbhal_lpc11u.o(i._ZN6USBHAL16EP3_OUT_callbackEv))
<BR>[Address Reference Count : 4]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
<LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[5b]"></a>USBHAL::EP4_OUT_callback()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbaudio.o(i._ZN6USBHAL16EP4_OUT_callbackEv))
<BR>[Address Reference Count : 4]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
<LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[6f]"></a>USBHAL::suspendStateChanged(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhal_lpc11u.o(i._ZN6USBHAL19suspendStateChangedEj))
<BR>[Address Reference Count : 1]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
</UL>
<P><STRONG><a name="[54]"></a>USBHAL::SOF(int)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhal_lpc11u.o(i._ZN6USBHAL3SOFEi))
<BR>[Address Reference Count : 4]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
<LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[6e]"></a>USBHAL::EP0in()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhal_lpc11u.o(i._ZN6USBHAL5EP0inEv))
<BR>[Address Reference Count : 1]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
</UL>
<P><STRONG><a name="[6d]"></a>USBHAL::EP0out()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhal_lpc11u.o(i._ZN6USBHAL6EP0outEv))
<BR>[Address Reference Count : 1]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
</UL>
<P><STRONG><a name="[6b]"></a>USBHAL::busReset()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbhal_lpc11u.o(i._ZN6USBHAL8busResetEv))
<BR>[Address Reference Count : 1]<UL><LI> usbhal_lpc11u.o(.constdata__ZTV6USBHAL)
</UL>
<P><STRONG><a name="[74]"></a>USBDevice::configurationDesc()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdevice.o(i._ZN9USBDevice17configurationDescEv))
<BR>[Address Reference Count : 1]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
</UL>
<P><STRONG><a name="[70]"></a>USBDevice::USBCallback_request()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdevice.o(i._ZN9USBDevice19USBCallback_requestEv))
<BR>[Address Reference Count : 1]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
</UL>
<P><STRONG><a name="[5d]"></a>USBDevice::USBCallback_busReset()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbaudio.o(i._ZN9USBDevice20USBCallback_busResetEv))
<BR>[Address Reference Count : 3]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[61]"></a>USBDevice::USBCallback_setInterface(unsigned short, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdevice.o(i._ZN9USBDevice24USBCallback_setInterfaceEth))
<BR>[Address Reference Count : 3]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
<LI> usbcdc.o(.constdata__ZTV6USBCDC)
</UL>
<P><STRONG><a name="[71]"></a>USBDevice::USBCallback_requestCompleted(unsigned char*, unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdevice.o(i._ZN9USBDevice28USBCallback_requestCompletedEPhj))
<BR>[Address Reference Count : 1]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
</UL>
<P><STRONG><a name="[72]"></a>USBDevice::USBCallback_setConfiguration(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdevice.o(i._ZN9USBDevice28USBCallback_setConfigurationEh))
<BR>[Address Reference Count : 1]<UL><LI> usbdevice.o(.constdata__ZTV9USBDevice)
</UL>
<P><STRONG><a name="[78]"></a>USBSerial::lineCodingChanged(int, int, int, int)</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, usbserial.o(i._ZN9USBSerial17lineCodingChangedEiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBSerial::lineCodingChanged(int, int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbserial.o(.constdata__ZTV9USBSerial)
</UL>
<P><STRONG><a name="[bf]"></a>USBSerial::USBSerial(unsigned short, unsigned short, unsigned short, bool)</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, main.o(i._ZN9USBSerialC1Etttb))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = USBSerial::USBSerial(unsigned short, unsigned short, unsigned short, bool) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::USBCDC(unsigned short, unsigned short, unsigned short, bool)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1c2]"></a>USBSerial::USBSerial__sub_object(unsigned short, unsigned short, unsigned short, bool)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, main.o(i._ZN9USBSerialC1Etttb), UNUSED)

<P><STRONG><a name="[2d]"></a>USBSerial::~USBSerial()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i._ZN9USBSerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBSerial::~USBSerial() &rArr; mbed::Stream::~Stream__sub_object() &rArr; mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::~USBHAL()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> usbserial.o(.constdata__ZTV9USBSerial)
</UL>
<P><STRONG><a name="[1c3]"></a>USBSerial::~USBSerial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN9USBSerialD1Ev), UNUSED)

<P><STRONG><a name="[165]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::~Buffer()
</UL>

<P><STRONG><a name="[112]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::~BufferedSerial__deallocating()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[166]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::Buffer(unsigned)
</UL>

<P><STRONG><a name="[167]"></a>operator new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[169]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c4]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[159]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[1c5]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1c6]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[16b]"></a>__0vfprintf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c7]"></a>__1vfprintf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf), UNUSED)

<P><STRONG><a name="[1c8]"></a>__2vfprintf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf), UNUSED)

<P><STRONG><a name="[156]"></a>__c89vfprintf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[17c]"></a>vfprintf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, printfa.o(i.__0vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[16c]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c9]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[1ca]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[115]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
</UL>

<P><STRONG><a name="[1cb]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[13d]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ee]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbdevice.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestSetup()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::requestGetDescriptor()
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_atexit</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[16e]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[e7]"></a>__cxa_guard_acquire</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevice::deviceDesc()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBCDC::deviceDesc()
</UL>

<P><STRONG><a name="[81]"></a>__cxa_pure_virtual</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxa_pure_virtual
</UL>
<BR>[Address Reference Count : 3]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[17a]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[1cc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1cd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1ce]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[17b]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[15c]"></a>fclose</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fclose_f.o(i._fclose$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>

<P><STRONG><a name="[15a]"></a>fopen</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fopen_f.o(i._fopen$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[170]"></a>freopen</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fopen_f.o(i._freopen$full))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[138]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[16f]"></a>_sys_close</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, retarget.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[123]"></a>_sys_ensure</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, retarget.o(i._sys_ensure))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[8d]"></a>_sys_open</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[124]"></a>_sys_seek</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[121]"></a>_sys_write</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _sys_write &rArr; serial_init &rArr; pinmap_merge &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[be]"></a>analogin_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, analogin_api.o(i.analogin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = analogin_init &rArr; pinmap_pinout &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[9d]"></a>analogin_read</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, analogin_api.o(i.analogin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = analogin_read &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vbat()
</UL>

<P><STRONG><a name="[11b]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_longitude()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_latitude()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_altitude()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_speed()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_get_course()
</UL>

<P><STRONG><a name="[116]"></a>error</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
</UL>

<P><STRONG><a name="[17d]"></a>exit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semihost_exit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_connected
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[b9]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[181]"></a>gpio_dir</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_dir &rArr; mbed_assert_internal &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[182]"></a>gpio_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_init &rArr; pin_function &rArr; mbed_assert_internal &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[14b]"></a>gpio_init_out</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gpio.o(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[184]"></a>gpio_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[152]"></a>i2c_frequency</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c_api.o(i.i2c_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_frequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::frequency(int)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[155]"></a>i2c_init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, i2c_api.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = i2c_init &rArr; pinmap_merge &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
</UL>

<P><STRONG><a name="[153]"></a>i2c_read</STRONG> (Thumb, 306 bytes, Stack size 36 bytes, i2c_api.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = i2c_read
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::read(int, char*, int, bool)
</UL>

<P><STRONG><a name="[187]"></a>i2c_stop</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, i2c_api.o(i.i2c_stop))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[154]"></a>i2c_write</STRONG> (Thumb, 230 bytes, Stack size 20 bytes, i2c_api.o(i.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_write
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::write(int, const char*, int, bool)
</UL>

<P><STRONG><a name="[113]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_adapter_read()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::printf(const char*, ...)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[c4]"></a>mbed_assert_internal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, assert.o(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = mbed_assert_internal &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write(gpio_t*, int)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>

<P><STRONG><a name="[180]"></a>mbed_die</STRONG> (Thumb, 258 bytes, Stack size 96 bytes, board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[17e]"></a>mbed_interface_connected</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mbed_interface.o(i.mbed_interface_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed_interface_connected
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semihost_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[14a]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>mbed_sdk_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.mbed_sdk_init))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>pin_function</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pinmap.o(i.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_function &rArr; mbed_assert_internal &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[185]"></a>pin_mode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pin_mode &rArr; mbed_assert_internal &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
</UL>

<P><STRONG><a name="[186]"></a>pinmap_merge</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pinmap_merge &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[178]"></a>pinmap_peripheral</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pinmap_peripheral &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[179]"></a>pinmap_pinout</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pinmap_pinout &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[188]"></a>semihost_connected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, semihost_api.o(i.semihost_connected))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_interface_connected
</UL>

<P><STRONG><a name="[17f]"></a>semihost_exit</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, semihost_api.o(i.semihost_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = semihost_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[14c]"></a>serial_baud</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, serial_api.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = serial_baud &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[189]"></a>serial_format</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, serial_api.o(i.serial_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serial_format &rArr; mbed_assert_internal &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[106]"></a>serial_getc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.serial_getc))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::rxIrq()
</UL>

<P><STRONG><a name="[150]"></a>serial_init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = serial_init &rArr; pinmap_merge &rArr; error &rArr; exit &rArr; mbed_die &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[151]"></a>serial_irq_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.serial_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[14d]"></a>serial_irq_set</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, serial_api.o(i.serial_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach&lang;BufferedSerial&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[10a]"></a>serial_putc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.serial_putc))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
</UL>

<P><STRONG><a name="[105]"></a>serial_readable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial_api.o(i.serial_readable))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::rxIrq()
</UL>

<P><STRONG><a name="[10c]"></a>serial_writable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, serial_api.o(i.serial_writable))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
</UL>

<P><STRONG><a name="[18a]"></a>ticker_irq_handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ticker_api.o(i.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ticker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[3a]"></a>uart0_irq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, serial_api.o(i.uart0_irq))
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[44]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>us_ticker_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, us_ticker.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>us_ticker_irq_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = us_ticker_irq_handler &rArr; ticker_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> us_ticker.o(i.us_ticker_init)
<LI> us_ticker.o(i.us_ticker_read)
</UL>
<P><STRONG><a name="[42]"></a>us_ticker_read</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, us_ticker.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, us_ticker.o(i.us_ticker_set_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>wait</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wait_api.o(i.wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wait &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::USBHAL()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[9b]"></a>wait_ms</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wait_api.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_pebble_control(PebbleControl)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[100]"></a>CircBuffer&lang;unsigned char, (int)128&rang;::queue(unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbserial.o(t._ZN10CircBufferIhLi128EE5queueEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CircBuffer&lang;unsigned char, (int)128&rang;::queue(unsigned char) &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::EP2_OUT_callback()
</UL>

<P><STRONG><a name="[fd]"></a>CircBuffer&lang;unsigned char, (int)128&rang;::isEmpty()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbserial.o(t._ZN10CircBufferIhLi128EE7isEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::_getc()
</UL>

<P><STRONG><a name="[10e]"></a>mbed::SerialBase::attach&lang;BufferedSerial&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType)</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, bufferedserial.o(t._ZN4mbed10SerialBase6attachI14BufferedSerialEEvPT_MS3_FvvENS0_7IrqTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbed::SerialBase::attach&lang;BufferedSerial&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::BufferedSerial(PinName, PinName, unsigned, unsigned, const char*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::prime()
</UL>

<P><STRONG><a name="[3c]"></a>mbed::FunctionPointerArg1&lang;void, void&rang;::membercaller&lang;BufferedSerial&rang;(void*, unsigned*)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, bufferedserial.o(t._ZN4mbed19FunctionPointerArg1IvvE12membercallerI14BufferedSerialEEvPvPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::FunctionPointerArg1&lang;void, void&rang;::membercaller&lang;BufferedSerial&rang;(void*, unsigned*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bufferedserial.o(t._ZN4mbed10SerialBase6attachI14BufferedSerialEEvPT_MS3_FvvENS0_7IrqTypeE)
</UL>
<P><STRONG><a name="[109]"></a>Buffer&lang;char&rang;::get()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bufferedserial.o(t._ZN6BufferIcE3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Buffer&lang;char&rang;::get() &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::getc()
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
</UL>

<P><STRONG><a name="[18c]"></a>Buffer&lang;char&rang;::clear()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, buffer.o(t._ZN6BufferIcE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buffer&lang;char&rang;::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::Buffer(unsigned)
</UL>

<P><STRONG><a name="[108]"></a>Buffer&lang;char&rang;::available()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bufferedserial.o(t._ZN6BufferIcE9availableEv))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::readable()
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::txIrq()
</UL>

<P><STRONG><a name="[110]"></a>Buffer&lang;char&rang;::Buffer(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, buffer.o(t._ZN6BufferIcEC1Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Buffer&lang;char&rang;::Buffer(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer&lang;char&rang;::clear()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::BufferedSerial(PinName, PinName, unsigned, unsigned, const char*)
</UL>

<P><STRONG><a name="[1cf]"></a>Buffer&lang;char&rang;::Buffer__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, buffer.o(t._ZN6BufferIcEC1Ej), UNUSED)

<P><STRONG><a name="[111]"></a>Buffer&lang;char&rang;::~Buffer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, buffer.o(t._ZN6BufferIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Buffer&lang;char&rang;::~Buffer() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::~BufferedSerial()
</UL>

<P><STRONG><a name="[1d0]"></a>Buffer&lang;char&rang;::~Buffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, buffer.o(t._ZN6BufferIcED1Ev), UNUSED)

<P><STRONG><a name="[107]"></a>Buffer&lang;char&rang;::operator =(char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bufferedserial.o(t._ZN6BufferIcEaSEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Buffer&lang;char&rang;::operator =(char) &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::write(const void*, unsigned)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::puts(const char*)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::rxIrq()
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[98]"></a>prv_send_flag</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pebbleserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prv_send_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write_internal
</UL>

<P><STRONG><a name="[95]"></a>prv_send_byte</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pebbleserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prv_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hdlc_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_write_internal
</UL>

<P><STRONG><a name="[97]"></a>prv_write_internal</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, pebbleserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prv_write_internal &rArr; prv_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_send_byte
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_send_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pebble_handle_link_control
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pebble_write
</UL>

<P><STRONG><a name="[3e]"></a>prv_pebble_control(PebbleControl)</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prv_pebble_control(PebbleControl) &rArr; wait_ms &rArr; us_ticker_read &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>prv_pebble_write_byte(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prv_pebble_write_byte(unsigned char) &rArr; BufferedSerial::putc(int) &rArr; BufferedSerial::prime() &rArr; mbed::SerialBase::attach&lang;BufferedSerial&rang;(T1*, void(T1::*)(), mbed::SerialBase::IrqType) &rArr; serial_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>__sti___8_main_cpp</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = __sti___8_main_cpp &rArr; USBSerial::USBSerial(unsigned short, unsigned short, unsigned short, bool) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial::USBSerial(unsigned short, unsigned short, unsigned short, bool)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::I2C::I2C(PinName, PinName)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferedSerial::BufferedSerial(PinName, PinName, unsigned, unsigned, const char*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[c3]"></a>gpio_write(gpio_t*, int)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_write(gpio_t*, int) &rArr; mbed_assert_internal &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>

<P><STRONG><a name="[c5]"></a>disableEndpoints()</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disableEndpoints()
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::usbisr()
</UL>

<P><STRONG><a name="[c9]"></a>NVIC_DisableIRQ(IRQn_Type)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbhal_lpc11u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::~USBHAL()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::disconnect()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHAL::USBHAL()
</UL>

<P><STRONG><a name="[35]"></a>&lang;Func1&rang;</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, SerialBase.o(i.<Func1>))
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[171]"></a>_fp_digits</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16a]"></a>_printf_core</STRONG> (Thumb, 1766 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vfprintf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[174]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[173]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[38]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[133]"></a>_fp_value</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[32]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[34]"></a>__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __default_terminate_handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
